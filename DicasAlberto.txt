CLIENTE:
* 1 thread lidando com comandos no terminal. Caso comando for upload, vai mandar o comando e logo depois os dados. Cuidar com os chunks.

* 1 thread com o watcher para propagar mudanças do dir local para outros clientes usando inotify. Ter cuidado para não ficar propagando mudanças vindas do servidor. Se o hash do arquivo não mudar, não propaga. (envia dados)

* 1 thread para receber os pushs do servidor nos arquivos (recebe dados)

* Cada cliente vai ter no máximo 2 devices. Caso tente conectar 3, vai ser bloqueado. Implementar Mutex para controlar isso.

* Nunca altera dois arquivos em dois devices separados ao mesmo tempo, não precisa se preocupar com isso.

* Os users vão ser identificados pelo username.


SERVIDOR:
* main = while(true) {accept(...) -> pthread_create(socket_novo)}
* primeiro aceita o socket1 e starta uma thread. A thread starta os outros 2.
* 1 thread para cada device dos clientes, com seus 3 sockets
* Cada usuário vai ter um diretório, com somente arquivos dentro. Os diretórios vão ser identificados pelo username

SOCKET:
Por que separar em pacotes? Apesar de não necessário no TCP, por conta de congestionamento no canal, precisa ficar lendo incessantemente o socket, mas o controle fica mais dificil, além de necessário um buffer grande e a procura de um sinal que o arquivo acabou (EOF).

Cliente avisa que vai mandar 600 chunks. Servidor tem um buffer de 100k. Servidor espera receber os 100k e começa a escrever no arquivo. Espera todo o próximo chunk e escreve no arquivo sucessivamente. Um while geral para ler tudo e um while para cada chunk. Definir metadados na comunicação para definir quantos chunks vão ser enviados.

Dois tipos de pacotes, um para dados e um para comandos. Assumir que os comandos com tamanho fixo. EX: 10bytes.

Reutilizar essa lógica de chunks e recebimento em todos os lugares.

Fluxo de upload:
Comando de upload de arquivo não sincronizado no cliente de um servidor
servidor coloca no sinc_dir
propaga essa mudança para todos os diretórios daquele user


NÂO UTILIZAR TIME_STAMP PARA VERIFICAR ARQUIVOS

