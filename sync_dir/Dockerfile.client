FROM debian:bullseye-slim as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    g++ \
    make \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy the source code
COPY . .

# Build the client
RUN make

# Runtime stage
FROM debian:bullseye-slim

# Install runtime dependencies and tools for DNS resolution
RUN apt-get update && apt-get install -y \
    libstdc++6 \
    dnsutils \
    iproute2 \
    iputils-ping \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy only the necessary files from the builder stage
COPY --from=builder /app/bin/client /app/bin/client

# Create a wrapper script to resolve hostname to IP
COPY <<EOF /app/start.sh
#!/bin/bash
set -e

USERNAME=\${USERNAME:-default_user}
SERVER_HOST=\${SERVER_IP:-server}
SERVER_PORT=\${SERVER_PORT:-8080}

# Try to resolve the hostname to an IP address
if [[ "\$SERVER_HOST" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
  # Already an IP address
  SERVER_IP=\$SERVER_HOST
else
  # Resolve hostname to IP
  echo "Resolving hostname \$SERVER_HOST to IP..."
  SERVER_IP=\$(getent hosts \$SERVER_HOST | awk '{ print \$1 }')
  
  if [ -z "\$SERVER_IP" ]; then
    echo "Failed to resolve \$SERVER_HOST to an IP address"
    exit 1
  fi
  
  echo "Resolved \$SERVER_HOST to \$SERVER_IP"
fi

echo "Starting client with: \$USERNAME \$SERVER_IP \$SERVER_PORT"
exec ./bin/client \$USERNAME \$SERVER_IP \$SERVER_PORT
EOF

RUN chmod +x /app/start.sh

RUN mkdir -p /app/client/sync_dir

# Set environment variables with default values
ENV USERNAME=default_user
ENV SERVER_IP=server
ENV SERVER_PORT=8080

# Run the wrapper script instead of directly running the client
CMD ["/app/start.sh"]